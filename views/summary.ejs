<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <!--<link rel="icon" href="/img/logoWA.png" type="image/x-icon" />-->
    <link rel="shortcut icon" href="/img/logo.ico">
    <title>Write Ai-d</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom fonts for this template -->
    <link href="vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>

    <!-- Custom styles for this template -->
    <link href="css/clean-blog.css" rel="stylesheet">
    <style type="text/css">
      .mx-auto h4 {
        font-size: 30px;
      }
      .mx-auto p {
        line-height: 1.6em;
        text-indent: 10%;
      }
      p a {
        text-decoration: none;
        color: #0085A1;
      }
    </style>

  </head>

  <body>

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light fixed-top" id="mainNav">
      <div class="container">
        <a class="navbar-brand" href="/">Write Ai-d</a>
        <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
          Menu
          <i class="fa fa-bars"></i>
        </button>
        <div class="collapse navbar-collapse" id="navbarResponsive">
          <ul class="navbar-nav ml-auto">
            <li class="nav-item">
              <a class="nav-link" href="/">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/summary">Summary Page</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/demo">Project Demo</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/future">Future Work</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/meet">Meet the Team</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/thanks">Special Thanks</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Page Header -->
    <header class="masthead" style="background-image: url('img/help.jpg')">
      <div class="overlay"></div>
      <div class="container">
        <div class="row">
          <div class="col-lg-8 col-md-10 mx-auto">
            <div class="page-heading">
              <h1>Summary Page</h1>
              <span class="subheading">Brief Explanation of Our Project</span>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <div class="container">
      <div class="row">
        <div class="col-lg-12 col-md-10 mx-auto">
          <article>
            <div class="container">
              <div class="row">
                <div class="col-lg-8 col-md-10 mx-auto" style="text-align: justify;">
                  <center><h2 class="section-heading">The Solution: Write Ai-d</h2></center>

                  <h4 class="section-heading">How it is Used</h4>
                  <p>
                    Write Ai-d has two core components: the physical mechanism and the computer software. The physical portion (SAD) allows the client to hold a stylus in a comfortable manner that conforms to her natural hand shape and reduces the stress on her hand and fingers when she involuntarily clenches. The computer software portion can be run from the click of a button. Once booted up, the client can draw letters on screen and the program will be able to analyze the characters despite jerky movements that might affect clarity. Additionally, the program allows the text to be easily transferred to a word document once she is finished. The functionality can be seen in the <a href="/demo"> Project Demo <a> tab!
                  </p>

                  <h4 class="section-heading">How it Helps the Client</h4>
                  <p>
                    The idea of Write Ai-d is to allow the client to have full functionality when writing notes or doing homework despite her condition. We enable her to write her <em> own </em> documents which allows her to work independently. Additionally, even though the idea may seem complex and might take more time than using a speech to text device, we created it specifically for her needs. When she writes and draws with pencils, she not only enjoys the process more, but she also learns <em> better </em>. Through focusing on our client’s needs, we were able to create a device that could one day help her: study better, keep clean notes and not be in pain as she does so.
                  </p>
                  <h4 class="section-heading">How Machine Learning Works</h4>
                  <p>
                    The backbone of our project is the use of Machine Learning to help our client, but how does it actually work? Well to give a brief explanation, Machine Learning is a method of data analysis that looks for unique characteristics in a large dataset. In our case, we used Machine Learning for Image recognition through the use of a Convolutional Neural Network. The program, after it was trained, could notice key features of each letter in the alphabet and then display the corresponding letter for the user. Due to this algorithm, even letters that are quite messy can be analyzed reducing the effort and focus the client would typically need to write a single letter.
                  </p>

                  <center><h2 class="section-heading">How We Built Write-Aid</h2></center>
                  <h4 class="section-heading">Stylus Attachment Device (SAD)</h4>
                  <p>
                    The SAD functions in the same manner as a regular stylus apart from the different hand positioning required to hold the device, because of its improved design to accommodate our client’s needs. The SAD is used with one hand, with fingers placed in between the sections of plastic frame, on the foam ball. The user’s hand should rest on the top of the device, hovering closely above or touching the copper wire, to enable the stylus tip. When not in use, the SAD can be stored anywhere at the user’s workstation, it is also portable due to its compact size. 
                  </p>
                  
                  <h4 class="section-heading">Computer Program</h4>
                  <p>
                    To create this program, various python modules were installed via the PIP installer such as: PyperClip, TensorFlow, PIL Fork, PyInstaller, TkInter and Numpy. Additionally, various python files and documentation were downloaded to run the training script. Finally, training data was needed, and for that, a new python script had to be created. After generating all the training data, the training script was ran and then using the .pb files created, the script to run the MLA would be completed.
                  </p>

                  <h4 class="section-heading">Generating the Training Images</h4>
                  <p>
                    Using the PIL and TkInter python modules, we programmed a python script that would start a Graphical User Interface (GUI). On that GUI, 150-300 images for each of the 26 letters of the alphabet were drawn. This took about 2-3 days to do, and we had 5600 pictures in the end. We needed many images to increase the variety of input images, additionally, the letters were drawn to mimic the client’s writing style. After all images were acquired, they were placed in respectively labeled subfolders.

                  </p>
                  
                  <h4 class="section-heading">Training the MLA</h4>
                  <p>
                    We had to run the modified training script, pass in our special training specifications and then route the command to the folder which contained all the letters. After that was completed, we could let the python script do the work and it would process all the data. This took around 5 hours to complete.
                  </p>

                  <h4 class="section-heading">Creating the Image Recognition MLA Script</h4>
                  <p>
                    After training was completed, the graph files for the data and a labelling file (to identify each letter) were then copied and placed in a new directory to be used for the creation of the machine learning script. The TensorFlow repository had a file that one could use to analyze a particular image which we used as the starter code for our script. 
                  </p>

                  <h4 class="section-heading">Modifying Tensorflow Script</h4>
                  <p>
                    Firstly, the script fetched files from many different subfolders. This would be a problem because one would have to modify the path locations on an individual’s PC to run the script which may be considered inconvenient for our client. To address this, we copied all requisite files into a singular directory to be easily accessed. Secondly, this script would only run on the command line as well, and furthermore, it used Argparse instead of functions for the inputs of the necessary parameters. We circumvented this issue by removing the need for argparse from the code and setting all the path locations and variables to local constants, so there would be no need for an input when our function was called. Finally, we used a code similar to the one we created for the development of the input images to allow the user to draw a new character on the screen. Putting these components together, we could now bind our analysis function to a button on the GUI, and each time it is clicked, it would analyze a recently updated .JPEG image located in the same subfolder.
                  </p>

                  <h4 class="section-heading">Converting Python Script to Executable</h4>
                  <p>
                    At this point, the program was functional and ready for use. However, in lieu of having the user download said files and modifying their PC, we decided to use the PyInstaller Module to convert our program into an executable. This module allows the program to be used on any PC once the folder is downloaded, and it can be easily identified for use through our custom application icon we designed!
                  </p>
                  

                  
                </div>
              </div>
            </div>
          </article>
        </div>
      </div>
    </div>

    <hr>

    <!-- Footer -->
    <footer>
      <div class="container">
        <div class="row">
          <div class="col-lg-8 col-md-10 mx-auto">
            <ul class="list-inline text-center">
              <li class="list-inline-item">
                <a href="#">
                  <span class="fa-stack fa-lg">
                    <i class="fa fa-circle fa-stack-2x"></i>
                    <i class="fa fa-twitter fa-stack-1x fa-inverse"></i>
                  </span>
                </a>
              </li>
              <li class="list-inline-item">
                <a href="#">
                  <span class="fa-stack fa-lg">
                    <i class="fa fa-circle fa-stack-2x"></i>
                    <i class="fa fa-facebook fa-stack-1x fa-inverse"></i>
                  </span>
                </a>
              </li>
              <li class="list-inline-item">
                <a href="#">
                  <span class="fa-stack fa-lg">
                    <i class="fa fa-circle fa-stack-2x"></i>
                    <i class="fa fa-github fa-stack-1x fa-inverse"></i>
                  </span>
                </a>
              </li>
            </ul>
            <p class="copyright text-muted">Copyright &copy; Write Ai-d 2018</p>
          </div>
        </div>
      </div>
    </footer>

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Custom scripts for this template -->
    <script src="js/clean-blog.min.js"></script>

  </body>

</html>
